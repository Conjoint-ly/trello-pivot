{"version":3,"sources":["../js/modal.js"],"names":["getCardData","iframe","window","TrelloPowerUp","board","lists","map","listItem","listIndex","cards","cardItem","customMap","id","name","members","member","fullName","join","labels","label","customFieldItems","forEach","customFieldItem","field","customFields","filter","idCustomField","type","Number","value","number","text","date","checked","options","option","idValue","flat","getPivotSettings","settings","get","rows","cols","aggregatorName","rendererName","hasOwnProperty","aggregators","renderers","cardData","pivotSettings","onRefresh","set","data","$","css","pivotUI"],"mappings":";AAIA,MAAMA,EAAc,UAChB,MAAMC,EAASC,OAAOC,cAAcF,SAC9BG,QAAcH,EAAOG,MAAM,OAEjC,aADwBH,EAAOI,MAAM,QACpBC,IAAI,CAACC,EAAUC,IACrBD,EAASE,MAAMH,IAAII,IACtB,MAAMC,EAAY,CACd,UAAWD,EAASE,GACpB,YAAaF,EAASG,KACtB,KAAQN,EAASM,KACjB,aAAcL,EAAY,EAC1B,QAAWE,EAASI,QAAQR,IAAIS,GAAUA,EAAOC,UAAUC,KAAK,MAChE,OAAUP,EAASQ,OAAOZ,IAAIa,GAASA,EAAMN,MAAMI,KAAK,OAiB5D,OAfAP,EAASU,iBAAiBC,QAAQC,IAC9B,IAAIC,EAAQnB,EAAMoB,aAAaC,OAAOf,GAAYA,EAASE,KAAOU,EAAgBI,eAAe,GAC9E,WAAfH,EAAMI,KACNhB,EAAUY,EAAMV,MAAQe,OAAON,EAAgBO,MAAMC,QAC/B,SAAfP,EAAMI,KACbhB,EAAUY,EAAMV,MAAQS,EAAgBO,MAAME,KACxB,SAAfR,EAAMI,KACbhB,EAAUY,EAAMV,MAAQS,EAAgBO,MAAMG,KACxB,aAAfT,EAAMI,KACbhB,EAAUY,EAAMV,MAAQ,IAAuC,IAAlCS,EAAgBO,MAAMI,SAC7B,SAAfV,EAAMI,OACbhB,EAAUY,EAAMV,MAAQU,EAAMW,QACzBT,OAAOU,GAAUA,EAAOvB,KAAOU,EAAgBc,SAAS,GAAGP,MAAME,QAGvEpB,KAEZ0B,KAAK,IAONC,EAAmB,UACrB,IAAIC,QAAiBrC,OAAOC,cAAcF,SAASuC,IAAI,QAAS,SAAU,aAe1E,OAdKD,IACDA,EAAW,CACPE,KAAM,CAAC,WACPC,KAAM,CAAC,aAAc,QACrBC,eAAgB,QAChBC,aAAc,UAGlBL,EAASM,eAAe,uBACjBN,EAASO,YAEhBP,EAASM,eAAe,qBACjBN,EAASQ,UAEbR,GAGX,WACI,MAAMS,QAAiBhD,IACjBiD,QAAsBX,IAE5BW,EAAcC,UAAY,OAAA,UAChBhD,OAAOC,cAAcF,SAASkD,IAAI,QAAS,SAAU,YAAaC,GACxEC,EAAE,oBAAoBC,IAAI,QAAS,UAGvCD,EAAE,WAAWE,QAAQP,EAAUC,GAC/BI,EAAE,oBAAoBC,IAAI,QAAS,SAVvC","file":"modal.d69e3525.js","sourceRoot":"../src/html","sourcesContent":["/**\n * Returns card data\n * @returns {Promise<any[]>}\n */\nconst getCardData = async () => {\n    const iframe = window.TrelloPowerUp.iframe();\n    const board = await iframe.board('all');\n    const listStore = await iframe.lists('all');\n    return listStore.map((listItem, listIndex) => {\n        return listItem.cards.map(cardItem => {\n            const customMap = {\n                'Card ID': cardItem.id,\n                'Card Name': cardItem.name,\n                'List': listItem.name,\n                'List index': listIndex + 1,\n                'Members': cardItem.members.map(member => member.fullName).join(', '),\n                'Labels': cardItem.labels.map(label => label.name).join(', ')\n            };\n            cardItem.customFieldItems.forEach(customFieldItem => {\n                var field = board.customFields.filter(cardItem => cardItem.id === customFieldItem.idCustomField)[0];\n                if (field.type === 'number') {\n                    customMap[field.name] = Number(customFieldItem.value.number);\n                } else if (field.type === \"text\") {\n                    customMap[field.name] = customFieldItem.value.text;\n                } else if (field.type === \"date\") {\n                    customMap[field.name] = customFieldItem.value.date;\n                } else if (field.type === \"checkbox\") {\n                    customMap[field.name] = 1 * (customFieldItem.value.checked === true);\n                } else if (field.type === \"list\") {\n                    customMap[field.name] = field.options\n                        .filter(option => option.id === customFieldItem.idValue)[0].value.text;\n                }\n            });\n            return customMap;\n        });\n    }).flat(1);\n};\n\n/**\n * Loads either saved or default pivot settings\n * @returns {Promise<{aggregatorName: string, rows: [string], rendererName: string, cols: [string, string]}>}\n */\nconst getPivotSettings = async () => {\n    let settings = await window.TrelloPowerUp.iframe().get('board', 'shared', 'pivotData');\n    if (!settings) {\n        settings = {\n            rows: ['Members'],\n            cols: ['List index', 'List'],\n            aggregatorName: 'Count',\n            rendererName: 'Table'\n        };\n    }\n    if (settings.hasOwnProperty('aggregators')) {\n        delete settings.aggregators;\n    }\n    if (settings.hasOwnProperty('renderers')) {\n        delete settings.renderers;\n    }\n    return settings\n}\n\n(async () => {\n    const cardData = await getCardData();\n    const pivotSettings = await getPivotSettings();\n\n    pivotSettings.onRefresh = async (data) => {\n        await window.TrelloPowerUp.iframe().set('board', 'shared', 'pivotData', data);\n        $('.pvtTable, table').css('width', 'auto');\n    };\n\n    $('#output').pivotUI(cardData, pivotSettings);\n    $('.pvtTable, table').css('width', 'auto');\n})();\n"]}